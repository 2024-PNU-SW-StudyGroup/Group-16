1.1 데이터 모델의 이해

1.1.1 모델링의 개념
모델(Model)이란 우리 말로 모형을 의미하며, 기본적으로 실물을 본떠서 축소하거나 단순하게 만든 것을 의미한다.
업무의 흐름을 가시화하고 명세화하는 것을 업무 형상화라고 한다. #명세: 분명하고 자세하게
모델링은 추상화를 기본으로 한다.

1.1.2 모델링의 특징
(1) 추상화(Abstraction): 대상의 주요 특징을 추출하여 일정한 형식으로 표현한다.
(2) 단순화(Simplification): UML(Unified Modeling Language), ERD(Entity Relationship Diagram)과 같이 제한된 언어나 약속된 표기법을 사용하여 누구나 이해하기 쉽도록 한다.
(3) 명확화(Clarity): 모델링의 결과는 보는 사람에 따라 서로 다르게 해석되지 않고 대상을 명확하게 이해할 수 있도록 모호함이 없게 기술한다.
=> 데이터 모델링이란 일정한 표기법을 사용하여 대상이 되는 데이터를 추상화, 단순화, 명확하하여 표현하는 것이다.

* 데이터 모델링 시 유의사항
- 중복(Duplication) 최소화: 데이터베이스의 여러 곳에 같은 정보를 중복하여 저장하지 않아야 한다.
- 비유연성(Inflexibility) 최소화: 데이터의 정의와 데이터의 사용 프로세스를 분리하여 데이터 또는 프로세스의 변화가 응용 프로그램과 데이터베이스에 미치는 영향을 최소화해야 한다.
- 비일관성(Inconsistency) 최소화: 데이터 간의 상호 연관관계를 명확하게 정의하여 데이터가 일관성 있게 유지되어야 한다.

1.1.3 모델링의 세 가지 관점
(1) 데이터 관점(대상, What)
(2) 프로세스 관점(처리방법, How)
(3) 데이터와 프로세스의 상관 관점(대상과 처리방법의 상관관계, Interaction)

1.1.4 모델링의 세 가지 단계
(1) 개념적 데이터 모델링(Conceptual Data Modeling): 가장 높은 추상화 레벨, EA(Enterprise Architecture)를 수립할 때 많이 이용되며 이 단계에서 엔터티(Entity)와 속성(Attribute)을 도출한다.
(2) 논리적 데이터 모델링(Logical Data Modeling): 서로 다른 DBMS(Database Management System)에 적용이 가능한 수준에서의 추상화 레벨을 가짐 => 재사용성이 높다. 정규화를 통해 중복 데이터를 최소화한다. 식별자를 도출하고 관계를 정의한다.
(3) 물리적 데이터 모델링(Physical Data Modeling): 가장 낮은 수준에서의 추상화 레벨, 성능 향상을 위해 반정규화 수행. 성능, 보안, 가용성을 고려한다. 테이블, 인덱스, 함수 등 생성

1.1.5 ANSI-SPARC에서 정의한 3단계 스키마 구조
데이터의 독립성 보장을 위해 3단계 스키마 구조를 가짐. 각각 사용자, 설계자, 개발자 관점에서 스키마를 정의
(1) 외부 스키마(External Schema): 사용자 관점, 사용자 또는 애플리케이션이 바라보는 데이터베이스 스키마를 정의. 다중 사용자 뷰 제공
(2) 개념 스키마(Conceptual Schema): 설계자 관점, 모든 사용자가 바라보는 데이터베이스 스키마를 통합하여 나타냄. 전체 데이터베이스에 저장되는 데이터와 그 관계를 정의. 통합된 뷰 제공
(3) 내부 스키마(Internal Schema): 개발자(SQLD) 관점, 디스크나 메모리 상의 물리적, 실질적 저장구조를 나타내며, 테이블, 칼럼, 인덱스 등을 정의. 물리적 뷰 제공

* 3단계 스키마 구조를 통해 보장되는 데이터 독립성
논리적 데이터 독립성: 외부 스키마와 개념 스키마 간의 독립성. 개념 스키마가 변경되어도 외부 스키마는 영향을 받지 않는다.
물리적 데이터 독립성: 개념 스키마와 내부 스키마 간의 독립성. 내부 스키마가 변경되어도 개념 스키마나 외부 스키마는 영향을 받지 않는다.

1.1.6 ERD
ERD(Entity Relationship Diagram)

* ERD 작성순서
(1) 엔터티를 도출한다.
(2) 도출된 엔터티를 적절하게 배치한다. 중요한 엔터티는 왼쪽 상단에 배치한다.
(3) 엔터티 간의 관계를 설정한다.
(4) 관계명을 기술한다. (행위 관계, 존재 관계를 표현)
(5) 관계의 참여도(Cardinality)를 기술한다. (일대일, 일대다, 다대다 표현)
(6) 관계의 필수/선택 여부를 기술한다. (Null 값을 가질 수 있는지 여부)


1.2 엔터티

1.2.1 엔터티의 개념
* PK(Primary Key)
- 주식별자를 다른 말로 PK(Primary Key)라고 한다. 엔터티를 ERD로 표현할 때 PK 속성과 일반 속성은 칸막이로 구분한다.

1.2.2 엔터티의 특징
(1) 업무에서 필요로 하고 관리하고자 하는 정보이어야 한다.
(2) 식별이 가능하도록 유일한 식별자를 가져야 한다.
(3) 영속적으로 존재하는 인스턴스가 두 개 이상인 집합을 이루어야 한다. <- 인스턴스: 엔터티는 구조를 정의한다. 이 구조에 맞게 실제로 디스크에 저장된 데이터 1건을 인스턴스라고 한다.
(4) 하위요소로 반드시 속성을 가져야 한다. #여기서 말하는 속성은 구성요소에 해당하는 Attribute. Property(특성)이 아님
(5) 엔터티는 다른 엔터티와 한 개 이상의 관계를 가져야 한다. 단, 통계성 엔터티나 코드성 엔터티의 경우 관계를 생략할 수 있다.

1.2.3 엔터티의 분류
(1) 발생 시점 / 상속 관계에 따른 분류
- 기본 엔터티: 자신의 고유한 주식별자를 가지는 독립적으로 생성되는 엔터티이다.
    예) 사원, 부서, 고객, 상품, 자재
- 중심 엔터티: 기본 엔터티로부터 주식별자를 상속받아 생성되며 업무의 중심 역할을 하는 엔터티이다.
    예) 급여, 주문
- 행위 엔터티: 두 개 이상의 엔터티를 상속받아 생성되는 엔터티이며 내용이 자주 변경되거나 데이터양이 계속 증가된다.
    예) 급여내역, 주문내역

(2) 물리적 형태의 존재 여부에 따른 분류
- 유형 엔터티: 물리적 형태가 존재하는 엔터티
    예) 사원, 상품, 학생
- 개념 엔터티: 물리적 형태 없이 개념적으로 정의되는 엔터티
    예) 부서, 상품분류, 강의
- 사건 엔터티: 업무를 수행하면서 발생하는 행위나 이벤트를 나타내는 엔터티
    예) 주문, 대여, 수강

* 교차 엔터티(Interaction Entity)
- M : N 관계를 해소하기 위해 만들어진 엔터티를 교차 엔터티라고 한다. # 서로 여러개 주고받는 엔터티 사이에 하나 생성해서 만든것.

* 엔터티 명명법
- 엔터티 생성 의미대로 이름을 부여하며 간결하고 명확하게 표현한다.
- 가능하면 약어를 사용하지 않는다. 단, 너무 이름이 길어질 때에는 약어를 표준화하여 사용할 수 있다.
- 영문의 경우 대문자를 사용하며 단수명사를 사용한다.
- 협업의 업무 용어를 사용하여 업무상의 의미를 분명하게 한다.
- 모든 엔터티의 이름은 서로 구별딜 수 있도록 유일해야 한다.
- 의미상 중복이 없도록 한다.


1.3 속성

1.3.1 속성의 개념
속성(Attribute)이란 엔터티에 대한 자세하고 구체적인 정보를 나타낸 것으로 엔터티의 하위요소이다. 속성은 의미상으로 더 이상 분리되지 않는 최소의 데이터 단위이다. 속성은 필수적인 것들로 최소화해야 한다.

1.3.2 속성값
속성 자체는 자신이 가질 수 있는 속성값들의 집합이라고 할 수 있다.
하나의 엔터티 인스턴스에서 각각의 속성은 한 개의 속성값만을 가져야 한다.
만약 한 개 이상의 속성값을 가질 수 잇는 경우라면 1차 정규화를 수행하여 한 개의 속성값만 갖도록 해야 한다.

1.3.3 엔터티, 인스턴스, 속성값
- 한 개의 엔터티는 두 개 이상의 인스턴스를 가진다.(엔터티는 인스턴스의 집합이다.)
- 한 개의 엔터티는 두 개 이상의 속성을 가진다.(엔터티는 속성의 집합이다.)
- 한 개의 속성은 한 개의 속성값만 가진다.
# 엔터티를 정의할 때 인스턴스가 한 개인 경우라면 굳이 엔터티로 정의할 필요가 없다.

1.3.4 속성의 분류
(1) 속성의 특성에 따른 분류
- 기본 속성: 엔터티가 본래부터 가지고 있어야 하는 속성
- 설계 속성: 엔터티가 본래부터 가지고 있던 속성은 아니지만 설계 시 필요하다고 판단되어 도출된 속성
- 파생 속성: 다른 속성으로부터 계산되거나 특정 규칙에 따라 변형되어 만들어진 속성

(2) 속성의 구성방식에 따른 분류
- PK(Primary Key, 기본키) 속성: 해당 엔터티의 인스턴스를 유일하게 식별할 수 있는 속성
- FK(Foreign Key, 외래키) 속성: 관계를 통해 다른 엔터티의 속성을 가져와 포함시킨 속성
- 일반 속성: 키(PK 또는 FK)가 아닌 나머지 일반 속성

1.3.5 도메인
속성이 가질 수 있는 값의 범위(값의 데이터 타입과 크기)를 정의한 것.


1.4 관계

1.4.1 관계의 개념
* 연관관계, 의존관계
- 연관관계: 존재 자체로 연관성을 가짐
- 의존관계: 특정 행위를 할 때만 연관성을 가짐

(1) 존재적 관계: 존재 자체로 서로 연관성을 갖는 관계
(2) 행위적 관계: 한 엔터티가 특정 행위나 이벤트를 일으킬 경우에 연관성이 발생하는 관계

1.4.2 표기법
(1) 관계명(Membership): 관계의 이름을 나타낸다. 존재적 관계와 행위적 관계를 서술한다.
(2) 관계차수(Cardinality): 1:1(일대일), 1:M(일대다), M:N(다대다)과 같이 관계를 맺는 엔터티 인스턴스의 차수를 나타낸다.
(3) 관계선택사양(Optionality): 필수적 관계인지 선택적 관계인지를 나타낸다.(Null 가능 여부를 의미한다.)


1.5 식별자

1.5.1 식별자의 개념
엔터티 인스턴스를 유일하게 구별할 수 있는 속성. 식별자(Identifier). 식별자는 해당 엔터티 인스턴스의 대표 속성이라고 할 수 있다. <- 식별자와 유사한 개념으로 키(Key)가 존재. 조건에 맞는 검색이나, 정렬, 조인 등의 기준이 되는 속성을 키라고 함. 키의 종류에는 슈퍼키(Super Key), 후보키(Candidate Key), 기본키(Primary Key), 대체키(Alternate Key), 외래키(Foreign Key) 등이 있다.
# 회원명의 경우 동명이인이 있을 수 있으므로 식별자로서는 적합하지 않다.

1.5.2 주식별자
해당 엔터티 인스턴스를 유일하게 구별해주는 식별자로서 PK(Primary Key)에 해당하는 속성을 말한다. 주식별자는 아래의 네 가지 성질을 만족해야 한다.
- 유일성: 각 엔터티 인스턴스를 유일하게 구별할 수 있어야 한다.
- 최소성: 유일성을 보장하면서도 최소 개수의 속성이 되어야 한다.
- 불변성: 속성값이 최초 생성 시 부여된 값에서 변경되지 않고 유지되어야 한다.
- 존재성: 반드시 값을 가져야 하며 Null 값을 가질 수 없다.

* PK 제약조건
PK는 유일성과 존재성을 가져야 하므로 Unique Key + Not Null의 제약조건을 갖는다.

1.5.3 식별자의 분류
(1) 대표성 여부
- 주식별자(Primary Identifier): 해당 엔터티 인스턴스를 유일하게 구별할 수 있는 식별자로 유일성, 최소성, 불변성, 존재성을 만족하는 식별자이다. 다른 엔터티와 참조 관계를 연결할 수 있다.
- 보조식별자(Alternate Identifier): 해당 엔터티를 유일하게 구별할 수 있는 식별자이기는 하나 대표성을 가지지 못하며 다른 엔터티와 참조관계를 연결할 수 없는 식별자이다.

* 후보키
- 주식별자를 PK(Primary Key), 보조식별자를 AK(Alternate Key)라고도 한다. PK 와 AK 모두 후보키(Candidate Key)에 속한다. 후보키는 유일성과 최소성을 만족하는 속성을 말한다.

(2) 스스로 생성 여부
- 내부식별자(Internal Identifier): 엔터티 내부에서 스스로 만들어지는 식별자이다.
- 외부식별자(Foreign Identifier): 관계를 통해 다른 엔터티로부터 받아오는 식별자이다. FK(Foreign Key)라고도 한다.

(3) 속성의 수
- 단일식별자(Single Identifier): 식별자를 구성하는 속성이 하나인 식별자이다.
- 복합식별자(Composite Identifier): 식별자를 구성하는 속성이 둘 이상인 식별자이다.

(4) 대체 여부
- 본질식별자(Original Identifier): 업무에 존재하는 본래의 식별자. 원조식별자라고도 한다.
- 인조식별자(Surrogate Identifier): 업무에 존재하지 않으나 원조식별자가 너무 복잡하게 구성되어 있어 인위적으로 만든 식별자. 대리식별자라고도 한다.
# 엔터티 인스턴스를 유일하게 구별할 수 있는 식별자로서 대표성을 가지는 식별자를 주식별자 또는 PK(Primary Key)라고 한다.

1.5.4 식별자 관계, 비식별자 관계
(1) 식별자 관계
엔터티 간의 강한 연결 관계를 표현한다. 부모 엔터티의 식별자가 자식 엔터티의 주식별자 구성에 포함되며 ERD로 그릴 때 실선으로 표현한다. 부모 엔터티 인스턴스와 자식 엔터티 인스턴스가 같은 생명주기를 가질 때, 즉 부모 엔터티 인스턴스가 소멸할 때 자식 엔터티 인스턴스도 같이 소멸하는 경우에는 식별자 관계로 표현하는 것이 적합하다.

(2) 비식별자 관계
엔터티 간의 약한 연결 관계를 표현한다. 부모 엔터티의 식별자가 자식 엔터티의 일반 속성이 된다. ERD로 그릴 때 점선으로 표현한다. 부모와 자식 엔터티 인스턴스가 서로 다른 생명주기를 가질 때에는 비식별자 관계가 더 적합하다.
