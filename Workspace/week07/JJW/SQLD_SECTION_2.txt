2.1 정규화

정규화: 데이터베이스의 이상현상(Anomaly)을 막기 위해, 데이터의 중복을 최소화하면서 테이블을 보다 잘 조직된 상태로 분해하는 과정
* 이상현상(Anomaly)
(1) 삽입 이상
(2) 갱신 이상
(3) 삭제 이상
불필요한 트랜잭션을 줄인다.

정규화의 결과: 데이터의 입력/수정/삭제 성능 향상, 데이터의 조회 성능 하락 가능성 증가(무조건적인 하락 X)

- 정규화 절차:
제 1 정규화: 릴레이션의 속성값이 모두 원자값(Atomic Value)만으로 구성되어야 한다.
- 중복값을 제거한다.
- 기본키를 설정한다.
제 2 정규화: 기본키가 2개 이상의 속성으로 이루어진 경우 부분 함수종속성을 제거한다.
제 3 정규화: 기본키를 제외한 칼럼 간의 종속성을 제거한다. 이행 함수종속성을 제거한다.
BCNF: 기본키를 제외하고 후보키가 있는 경우 후보키가 기본키를 종속시키면 분해한다.

2.1.1 제1정규형
모든 속성이 하나의 속성값만을 가지고 있으면서 유사한 속성이 반복되지 않는 상태 <- 속성의 원자성(Atomicity)이 확보됨

2.1.2 제2정규형
주식별자가 두 개 이상으로 구성된 복합식별자인 경우, 일반 속성이 주식별자의 일부에만 종속성을 가질 때. 이러한 부분함수종속성을 제거한 상태

2.1.3 제3정규형
주식별자가 아닌 일반 속성 간에 함수종속성이 존재할 때 이를 이행 함수종속성이라고 함. 이러한 이행함수종속성을 제거한 상태


2.2 관계와 조인의 이해
데이터의 정합성과 조회성능 간에는 트레이드 오프 관계가 성립한다.

2.2.2 테이블 반정규화
1. 테이블 병합
* 슈퍼타입/서브타입 관계 테이블 병합
- One to One Type: 개별로 발생되는 트랜잭션에 대해서는 개별 테이블로 구성한다.
- Plus Type: 슈퍼타입 + 서브타입에 대해 발생되는 트랜잭션은 JOIN 연산에 의한 성능저하를 가져오므로 슈퍼타입 + 서브타입 테이블로 구성된다.
- Single Type: 전체를 한 번에 조회하는 트랜잭션은 UNION 연산에 의한 성능저하를 가져오므로 전체를 하나의 테이블로 통합한다.
https://developer-ping9.tistory.com/293

2. 테이블 분할
- 수평분할(파티셔닝)

3. 테이블 추가
- 중복 테이블 추가
- 통계 테이블 추가
- 이력 테이블 추가
- 부분 테이블 추가


2.3 모델이 표현하는 트랜잭션의 이해
2.3.1 트랜잭션의 개념
(1) 트랜잭션의 특성
- 원자성(Atomicity): 하나의 트랜잭션으로 묶인 연산들은 'All or Nothing'의 개념으로 모두 실행되든지 아니면 전혀 실행되지 않아야 한다.
- 일관성(Consistency): 트랜잭션의 결과는 데이터베이스의 정합성을 깨지 않는다는 것으로서 트랜잭션 이전에 데이터베이스에 오류가 없다면 트랜잭션 이후에도 오류가 없다.
- 고립성(Isolation): 트랜잭션은 독립적으로 수행되며 다른 트랜잭션이 실행 중간에 간섭하거나 영향을 미치지 않는다.
- 영속성(Durability): 트랜잭션의 결과는 데이터베이스에 영구적으로 저장되어 유지된다.
*영속성을 지속성이라고도 한다.


2.4 Null 속성의 이해
2.4.1 Null의 개념
아무런 값도 없다는 의미

Null과의 연산
단일행 연산: Null 값과의 연산 수행결과는 Null
다중행 연산: Null 값인 행을 제외하고 연산을 수행. 전체 연산 대상에서 제외
집계함수에서 기본적으로 제외하나 값이 Null 밖에 없다면 Null을 반환.


2.5 본질식별자 vs 인조식별자
본질식별자: 업무에 존재하는 원래의 식별자로 원조식별자라고도 한다.
인조식별자: 업무에 존재하지 않으나 원래의 식별자가 너무 복잡하게 구성되어 있어 인위적으로 만든 식별자로 대리식별자라고도 한다.